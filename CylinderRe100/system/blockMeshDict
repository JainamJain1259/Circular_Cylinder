/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1912                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   1;

vertices #codeStream
{
   codeInclude
      #{
      	  #include "pointField.H"
      #};
   
   code
   #{
   
pointField points(48);
points[0]  = point(-8, -8, -0.5);
points[1]  = point(-3, -8, -0.5);
points[2]  = point(-0.353553, -8, -0.5);
points[3]  = point(0, -8, -0.5);
points[4]  = point(0.353553, -8, -0.5);
points[5]  = point(3, -8, -0.5);
points[6]  = point(25, -8, -0.5);

points[7]  = point(25, -3, -0.5);
points[8]  = point(3, -3, -0.5);
points[9]  = point(0.353553, -3, -0.5);
points[10] = point(0, -3, -0.5);
points[11] = point(-0.353553, -3, -0.5);
points[12] = point(-3, -3, -0.5);
points[13] = point(-8, -3, -0.5);

points[14] = point(-8, -0.353553, -0.5);
points[15] = point(-3, -0.353553, -0.5);
points[16] = point(-0.353553, -0.353553, -0.5);
points[17] = point(0.353553, -0.353553, -0.5);
points[18] = point(3, -0.353553, -0.5);
points[19] = point(25, -0.353553, -0.5);

points[20] = point(25, 0, -0.5);
points[21] = point(3, 0, -0.5);
points[22] = point(0.5, 0, -0.5);
points[23] = point(-0.5, 0, -0.5);
points[24] = point(-3, 0, -0.5);
points[25] = point(-8, 0, -0.5);

points[26]  = point(-8, 0.353553, -0.5);
points[27]  = point(-3, 0.353553, -0.5);
points[28]  = point(-0.353553, 0.353553, -0.5);
points[29]  = point(0.353553, 0.353553, -0.5);
points[30]  = point(3, 0.353553, -0.5);
points[31]  = point(25, 0.353553, -0.5);

points[32]  = point(25, 3, -0.5);
points[33]  = point(3, 3, -0.5);
points[34] = point(0.353553, 3, -0.5);
points[35] = point(0, 3, -0.5);
points[36] = point(-0.353553, 3, -0.5);
points[37] = point(-3, 3, -0.5);
points[38] = point(-8, 3, -0.5);

points[39] = point(-8, 8, -0.5);
points[40] = point(-3, 8, -0.5);
points[41] = point(-0.353553, 8, -0.5);
points[42] = point(0, 8, -0.5);
points[43] = point(0.353553, 8, -0.5);
points[44] = point(3, 8, -0.5);
points[45] = point(25, 8, -0.5);

points[46] = point(0, 0.5, -0.5);
points[47] = point(0, -0.5, -0.5);

// Duplicate z points
label sz = points.size();
points.setSize(2*sz);
for (label i = 0; i < sz; i++)
{
    const point& pt = points[i];
    points[i+sz] = point(pt.x(), pt.y(), -pt.z());
}


        os  << points;
    #};
};

blocks
(
    hex (0 1 12 13 48 49 60 61) (50 50 1) simpleGrading (0.3351049385 0.4172747409 1)//0
    hex (1 2 11 12 49 50 59 60) (40 50 1) simpleGrading (1 0.4172747409 1)//1
    hex (2 3 10 11 50 51 58 59) (10 50 1) simpleGrading (1 0.4172747409 1)//2
    hex (3 4 9 10 51 52 57 58) (10 50 1) simpleGrading (1 0.4172747409 1)//3
    hex (4 5 8 9 52 53 56 57) (50 50 1) simpleGrading (1 0.4172747409 1)//4
    hex (5 6 7 8 53 54 55 56) (120 50 1) simpleGrading (9.051021447 0.4172747409 1)//5
    
    hex (8 7 19 18 56 55 67 66) (120 50 1) simpleGrading (9.051021447 1 1)//6
    hex (9 8 18 17 57 56 66 65) (50 50 1) simpleGrading (1 1 1)//7
    hex (10 9 17 47 58 57 65 95) (10 50 1) simpleGrading (1 1 1)//8
    hex (11 10 47 16 59 58 95 64) (10 50 1) simpleGrading (1 1 1)//9
    hex (12 11 16 15 60 59 64 63) (40 50 1) simpleGrading (1 1 1)//10
    hex (13 12 15 14 61 60 63 62) (50 50 1) simpleGrading (0.3351049385 1 1)//11
    
    hex (14 15 24 25 62 63 72 73) (50 7 1) simpleGrading (0.3351049385 1 1)//12
    hex (15 16 23 24 63 64 71 72) (40 7 1) simpleGrading (1 1 1)//13
    hex (17 18 21 22 65 66 69 70) (50 7 1) simpleGrading (1 1 1)//14
    hex (18 19 20 21 66 67 68 69) (120 7 1) simpleGrading (9.051021447 1 1)//15
    
    hex (21 20 31 30 69 68 79 78) (120 7 1) simpleGrading (9.051021447 1 1)//16
    hex (22 21 30 29 70 69 78 77) (50 7 1) simpleGrading (1 1 1)//17
    hex (24 23 28 27 72 71 76 75) (40 7 1) simpleGrading (1 1 1)//18
    hex (25 24 27 26 73 72 75 74) (50 7 1) simpleGrading (0.3351049385 1 1)//19
    
    hex (26 27 37 38 74 75 85 86) (50 50 1) simpleGrading (0.3351049385 1 1)//20
    hex (27 28 36 37 75 76 84 85) (40 50 1) simpleGrading (1 1 1)//21
    hex (28 46 35 36 76 94 83 84) (10 50 1) simpleGrading (1 1 1)//22
    hex (46 29 34 35 94 77 82 83) (10 50 1) simpleGrading (1 1 1)//23
    hex (29 30 33 34 77 78 81 82) (50 50 1) simpleGrading (1 1 1)//24
    hex (30 31 32 33 78 79 80 81) (120 50 1) simpleGrading (9.051021447 1 1)//25
   
    hex (33 32 45 44 81 80 93 92) (120 50 1) simpleGrading ( 9.051021447 2.396437366 1)//26
    hex (34 33 44 43 82 81 92 91) (50 50 1) simpleGrading (1 2.396437366 1)//27
    hex (35 34 43 42 83 82 91 90) (10 50 1) simpleGrading (1 2.396437366 1)//28
    hex (36 35 42 41 84 83 90 89) (10 50 1) simpleGrading (1 2.396437366 1)//29
    hex (37 36 41 40 85 84 89 88) (40 50 1) simpleGrading (1 2.396437366 1)//30
    hex (38 37 40 39 86 85 88 87) (50 50 1) simpleGrading (0.3351049385 2.396437366 1)//31
    
);

edges
(
	arc 22 29 (0.433012 0.25 -0.5)
	arc 29 46 (0.25 0.433012 -0.5)
	arc 46 28 (-0.25 0.433012 -0.5)
	arc 28 23 (-0.433012 0.25 -0.5)
	arc 23 16 (-0.433012 -0.25 -0.5)
	arc 16 47 (-0.25 -0.433012 -0.5)
	arc 47 17 (0.25 -0.433012 -0.5)
	arc 17 22 (0.433012 -0.25 -0.5)
	
	arc 70 77 (0.433012 0.25 0.5)
	arc 77 94 (0.25 0.433012 0.5)
	arc 94 76 (-0.25 0.433012 0.5)
	arc 76 71 (-0.433012 0.25 0.5)
	arc 71 64 (-0.433012 -0.25 0.5)
	arc 64 95 (-0.25 -0.433012 0.5)
	arc 95 65 (0.25 -0.433012 0.5)
	arc 65 70 (0.433012 -0.25 0.5)
	
);

boundary
(
    down
    {
        type symmetryPlane;
        faces
        (
            (0 1 49 48)
            (1 2 50 49)
            (2 3 51 50)
            (3 4 52 51)
            (4 5 53 52)
            (5 6 54 53)
        );
    }
    up
    {
        type symmetryPlane;
        faces
        (
            (39 40 87 88)
            (40 41 88 89)
            (41 42 89 90)
            (42 43 90 91)
            (43 44 91 92)
            (44 45 92 93)
            
        );
    }
    left 
     { 
     	type patch;
     	faces
     	( 
     		(0  13 48 61)
     		(13 14 61 62)
     		(14 25 62 73)
     		(25 26 73 74)
     		(26 38 74 86)
     		(38 39 86 87)
     	);
     }
    right
     {
     	type patch;
     	faces
     	(
     		(6 7 54 55)
     		(7 19 55 67)
     		(19 20 67 68)
     		(20 31 68 79)
     		(31 32 79 80)
     		(32 45 80 93)
	);
      } 
    cylinder
    { 
     	type wall;
     	faces
     	(
     		(22 29 70 77)
     		(29 46 77 94)
     		(46 28 94 76)
     		(28 23 76 71)
     		
     		(23 16 71 64)
     		(16 47 64 95)
     		(47 17 95 65)
     		(17 22 65 70)  
     	);
    }	
     		
    frontAndBack
    {
        type empty;
        faces
        (
           (0 1 12 13) //0          
           (1 2 11 12) //1   
           (2 3 10 11) //2           
           (3 4  9 10) //3           
           (4 5 8 9)           
           (5 6 7 8)  
                    
           (8 7 19 18)           
           (9 8 18 17)           
           (10 9 17 47)           
           (11 10 47 16)           
           (12 11 16 15)           
           (13 12 15 14)
                      
           (14 15 24 25)            
           (15 16 23 24)          
           (17 18 21 22)          
           (18 19 20 21) 
                    
           (21 20 31 30)            
           (22 21 30 29)           
           (24 23 28 27)           
           (25 24 27 26)
                      
           (26 27 37 38)          
           (27 28 36 37)           
           (28 46 35 36)           
           (46 29 34 35)           
           (29 30 33 34)            
           (30 31 32 33) 
                     
           (33 32 45 44)           
           (34 33 44 43)           
           (35 34 43 42)            
           (36 35 42 41)           
           (37 36 41 40)           
           (38 37 40 39)
            
//At z = 0.5    
       
           (48 49 60 61)
           (49 50 59 60) 
           (50 51 58 59)
           (51 52 57 58)
           (52 53 56 57)
           (53 54 55 56)
           
           (56 55 67 66)
           (57 56 66 65)
           (58 57 65 95)
           (59 58 95 64)
           (60 59 64 63)
           (61 60 63 62)
           
           (62 63 72 73)
           (63 64 71 72)
           (65 66 69 70) 
           (66 67 68 69)
           
           (69 68 79 78)
           (70 69 78 77)
           (72 71 76 75)
           (73 72 75 74)
           
           (74 75 85 86)
           (75 76 84 85)
           (76 94 83 84)
           (94 77 82 83)
           (77 78 81 82)
           (78 79 80 81)
           
           (81 80 93 92)
           (82 81 92 91)
	   (83 82 91 90)
	   (84 83 90 89)
	   (85 84 89 88) 
	   (86 85 88 87)          
           
           
           
                 
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
